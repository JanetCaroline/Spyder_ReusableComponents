<Activity mc:Ignorable="sap sap2010" x:Class="Zip_Unzip_File" this:Zip_Unzip_File.in_fileExistBusinessException="File/Folder could not be found" this:Zip_Unzip_File.in_sourcePath="C:\Users\saivara\Documents\UiPath\Output\TT_to_payroll_2.zip" this:Zip_Unzip_File.in_destinationPath="C:\Users\saivara\Documents\UiPath\Output\TT_to_payroll" this:Zip_Unzip_File.In_isZip="False" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Diagnostics;assembly=System" xmlns:si="clr-namespace:System.IO;assembly=mscorlib" xmlns:sic="clr-namespace:System.IO.Compression;assembly=System.IO.Compression.FileSystem" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_fileExistBusinessException" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="For zip,this will store the folder path to be zipped.&#xA;For Unzip,it will store the zip file path." Name="in_sourcePath" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="For zip,this will store the zip file path.&#xA;For Unzip,it will store the destination folder path." Name="in_destinationPath" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Values could be &quot;Zip&quot; or &quot;Unzip&quot;" Name="In_isZip" Type="InArgument(x:Boolean)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1170.66666666667,2082.66666666667</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Zip_Unzip_File_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="22">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.IO.Compression</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="21">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Configuration.Install</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldCollapseAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence sap2010:Annotation.AnnotationText="This workflow is used to zip/unzip folders.&#xA;&#xA;pre-condition:File to zip/unzip should be present.&#xA;post-condition:File zipped/unzipped at specified location." DisplayName="Zip_Unzip_File" sap:VirtualizedContainerService.HintSize="1150.66666666667,2022.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_14">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:Stopwatch" Name="timer" />
      <Variable x:TypeArguments="ui:BusinessRuleException" Name="businessExceptionVar" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke StartOfSequence-InitiateTimerAndLog workflow" sap:VirtualizedContainerService.HintSize="1108.66666666667,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Utilities\StartOfSequence-InitiateTimerAndLog.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_ModuleNameToLog">[If(In_isZip,"Zipping ","Unzipping ")]</InArgument>
        <OutArgument x:TypeArguments="sd:Stopwatch" x:Key="out_StopWatch">[timer]</OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <Delay Duration="00:00:01" sap:VirtualizedContainerService.HintSize="1108.66666666667,22" sap2010:WorkflowViewState.IdRef="Delay_2" />
    <Switch x:TypeArguments="x:Boolean" DisplayName="Switch:Choose Zip or Unzip" Expression="[In_isZip]" sap:VirtualizedContainerService.HintSize="1108.66666666667,1248" sap2010:WorkflowViewState.IdRef="Switch`1_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence x:Key="True" DisplayName="Zip" sap:VirtualizedContainerService.HintSize="840,610" sap2010:WorkflowViewState.IdRef="Sequence_10">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[Directory.Exists(in_sourcePath)]" DisplayName="If:Check if file to Zip is existing" sap:VirtualizedContainerService.HintSize="798,518" sap2010:WorkflowViewState.IdRef="If_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsPinned">True</x:Boolean>
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If.Then>
            <Sequence DisplayName="Sequence:Steps to Zip File" sap:VirtualizedContainerService.HintSize="376,364" sap2010:WorkflowViewState.IdRef="Sequence_9">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <InvokeMethod DisplayName="Invoke method:Zip" sap:VirtualizedContainerService.HintSize="334,137.333333333333" sap2010:WorkflowViewState.IdRef="InvokeMethod_11" MethodName="CreateFromDirectory" TargetType="sic:ZipFile">
                <InArgument x:TypeArguments="x:String">[in_sourcePath]</InArgument>
                <InArgument x:TypeArguments="x:String">[in_destinationPath]</InArgument>
              </InvokeMethod>
              <ui:LogMessage DisplayName="Log Message:Zip Succesfull" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Info" Message="[&quot;Zipping completed for &quot;+in_sourcePath]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence DisplayName="Folder Not Exist" sap:VirtualizedContainerService.HintSize="376,288.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_15">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign:Business Exception Variable" sap:VirtualizedContainerService.HintSize="334,62" sap2010:WorkflowViewState.IdRef="Assign_3">
                <Assign.To>
                  <OutArgument x:TypeArguments="ui:BusinessRuleException">[businessExceptionVar]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="ui:BusinessRuleException">[new BusinessRuleException(in_fileExistBusinessException+":"+in_sourcePath+" during zipping")]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:LogMessage DisplayName="Log Message:Zip UnSuccesfull" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_18" Level="Info" Message="[&quot;Zipping Unsuccessfull for  &quot;+in_sourcePath]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
      <Sequence x:Key="False" DisplayName="Unzip" sap:VirtualizedContainerService.HintSize="1068.66666666667,1033.33333333333" sap2010:WorkflowViewState.IdRef="Sequence_13">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[File.Exists(in_sourcePath)]" DisplayName="If:Steps to check if file to Unzip exists" sap:VirtualizedContainerService.HintSize="1026.66666666667,941.333333333333" sap2010:WorkflowViewState.IdRef="If_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsPinned">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If.Then>
            <Sequence DisplayName="Sequence:Steps to Unzip File" sap:VirtualizedContainerService.HintSize="604.666666666667,787.333333333333" sap2010:WorkflowViewState.IdRef="Sequence_11">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[Directory.Exists(in_destinationPath)]" sap:VirtualizedContainerService.HintSize="562.666666666667,560.666666666667" sap2010:WorkflowViewState.IdRef="If_6">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence sap:VirtualizedContainerService.HintSize="279.333333333333,406.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_16">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <InvokeMethod DisplayName="Invoke method:Move Older File to New File" sap:VirtualizedContainerService.HintSize="237.333333333333,137.333333333333" sap2010:WorkflowViewState.IdRef="InvokeMethod_18" MethodName="Move" TargetType="si:Directory">
                      <InArgument x:TypeArguments="x:String">[in_destinationPath]</InArgument>
                      <InArgument x:TypeArguments="x:String">[Path.Combine(Path.GetDirectoryName(in_destinationPath),Path.GetFileNameWithoutExtension(in_destinationPath)+"copy"+now.ToString("ddMMyyyy_HHmmss"))]</InArgument>
                    </InvokeMethod>
                    <InvokeMethod DisplayName="Invoke method:Unzip" sap:VirtualizedContainerService.HintSize="237.333333333333,137.333333333333" sap2010:WorkflowViewState.IdRef="InvokeMethod_12" MethodName="ExtractToDirectory" TargetType="sic:ZipFile">
                      <InArgument x:TypeArguments="x:String">[in_sourcePath]</InArgument>
                      <InArgument x:TypeArguments="x:String">[in_destinationPath]</InArgument>
                    </InvokeMethod>
                  </Sequence>
                </If.Then>
                <If.Else>
                  <InvokeMethod DisplayName="Invoke method:Unzip" sap:VirtualizedContainerService.HintSize="237.333333333333,137.333333333333" sap2010:WorkflowViewState.IdRef="InvokeMethod_17" MethodName="ExtractToDirectory" TargetType="sic:ZipFile">
                    <InArgument x:TypeArguments="x:String">[in_sourcePath]</InArgument>
                    <InArgument x:TypeArguments="x:String">[in_destinationPath]</InArgument>
                  </InvokeMethod>
                </If.Else>
              </If>
              <ui:LogMessage DisplayName="Log Message:Unzipping Successfull" sap:VirtualizedContainerService.HintSize="562.666666666667,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_12" Level="Info" Message="[&quot;Unzipping successfull for &quot;+in_sourcePath]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence sap:VirtualizedContainerService.HintSize="376,288.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_12">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign:Business Exception Variable" sap:VirtualizedContainerService.HintSize="334,62" sap2010:WorkflowViewState.IdRef="Assign_4">
                <Assign.To>
                  <OutArgument x:TypeArguments="ui:BusinessRuleException">[businessExceptionVar]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="ui:BusinessRuleException">[new BusinessRuleException(in_fileExistBusinessException+":"+in_destinationPath+" during unzipping")]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:LogMessage DisplayName="Log Message:Zip UnSuccesfull" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_20" Level="Info" Message="[&quot;UnZipping Unsuccessfull for  &quot;+in_sourcePath]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
    </Switch>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke EndOfSequence-StopTimerAndLog workflow" sap:VirtualizedContainerService.HintSize="1108.66666666667,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Utilities\EndOfSequence-StopTimerAndLog.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_ModuleNameToLog">[If(In_isZip,"Zipping ","Unzipping ")]</InArgument>
        <InArgument x:TypeArguments="sd:Stopwatch" x:Key="in_StopWatch">[timer]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <If Condition="[IsNothing(businessExceptionVar)]" DisplayName="Check for Any Business Exception encountered in previous steps" sap:VirtualizedContainerService.HintSize="1108.66666666667,248.666666666667" sap2010:WorkflowViewState.IdRef="If_5">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <ui:LogMessage DisplayName="Log Message:No exception" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_19" Level="Info" Message="[&quot;No Business Exception Encountered&quot;]">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsPinned">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:LogMessage>
      </If.Then>
      <If.Else>
        <Throw DisplayName="Throw:Business exception File/Folder not found" Exception="[businessExceptionVar]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_5" />
      </If.Else>
    </If>
  </Sequence>
</Activity>